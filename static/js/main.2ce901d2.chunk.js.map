{"version":3,"sources":["components/PostsList/PostsList.tsx","utils/fetchClient.ts","components/Loader/Loader.tsx","components/NewCommentForm/NewCommentForm.tsx","api/posts.tsx","components/PostDetails/PostDetails.tsx","components/UserSelector/UserSelector.tsx","App.tsx","index.tsx"],"names":["PostsList","_ref","posts","selectedPost","setSelectedPost","setIsErrorComments","setIsFormShown","setComments","handleButtonTitle","id","_jsxs","children","_jsx","className","map","post","title","type","classNames","onClick","handleSelectPost","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","arguments","length","undefined","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","Loader","NewCommentForm","postId","_useState","useState","_useState2","_slicedToArray","isLoading","setIsLoading","_useState3","_useState4","name","setName","_useState5","_useState6","isNameError","setIsNameError","_useState7","_useState8","email","setEmail","_useState9","_useState10","errorMessage","setErrorMessage","_useState11","_useState12","isEmailError","setIsEmailError","_useState13","_useState14","commentText","setCommentText","_useState15","_useState16","isCommentError","setIsCommentError","onSubmit","event","preventDefault","test","comment","addComment","newComment","currComments","concat","_toConsumableArray","catch","finally","htmlFor","placeholder","value","onChange","target","PostDetails","comments","isErrorComments","isLoadingComments","isFormShown","handleDeleteComment","commentId","currentComments","filter","deleteComment","_Fragment","href","UserSelector","users","selectedUser","setSelectedUser","isOpen","setIsOpen","dropdownRef","useRef","useEffect","handleClickOutside","current","contains","document","addEventListener","removeEventListener","ref","role","user","handleSelectUser","App","setUsers","isLoadingUsers","setIsLoadingUsers","isErrorPosts","setIsErrorPosts","setPosts","_useState17","_useState18","setIsLoadingComments","_useState19","_useState20","userId","error","Error","status","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.2ce901d2.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport React from 'react';\nimport { Post } from '../../types/Post';\nimport { Comment } from '../../types/Comment';\n\ntype Props = {\n  posts: Post[],\n  selectedPost: Post | null,\n  setSelectedPost: (post: Post | null) => void,\n  setIsErrorComments: (v: boolean) => void,\n  setIsFormShown: (v: boolean) => void,\n  setComments: (post: Comment[]) => void,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  selectedPost,\n  setSelectedPost,\n  setIsErrorComments,\n  setIsFormShown,\n  setComments,\n}) => {\n  const handleSelectPost = (post: Post) => {\n    if (selectedPost?.id !== post.id) {\n      setSelectedPost(post);\n      setIsFormShown(false);\n\n      return;\n    }\n\n    setIsErrorComments(false);\n    setSelectedPost(null);\n    setComments([]);\n  };\n\n  const handleButtonTitle = (id: number) => {\n    return selectedPost && selectedPost.id === id\n      ? 'Close'\n      : 'Open';\n  };\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(post => {\n            const { id, title } = post;\n\n            return (\n              <tr data-cy=\"Post\" key={id}>\n                <td data-cy=\"PostId\">\n                  {id}\n                </td>\n\n                <td data-cy=\"PostTitle\">\n                  {title}\n                </td>\n\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    type=\"button\"\n                    data-cy=\"PostButton\"\n                    className={classNames(\n                      'button is-link',\n                      { 'is-light': selectedPost?.id !== id },\n                    )}\n                    onClick={() => handleSelectPost(post)}\n                  >\n                    {handleButtonTitle(id)}\n                  </button>\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { Comment } from '../../types/Comment';\nimport { addComment } from '../../api/posts';\n\ntype Props = {\n  setIsErrorComments: (v: boolean) => void,\n  setComments: React.Dispatch<React.SetStateAction<Comment[]>>\n  postId: number,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  setIsErrorComments,\n  setComments,\n  postId,\n}) => {\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  const [name, setName] = useState<string>('');\n  const [isNameError, setIsNameError] = useState<boolean>(false);\n\n  const [email, setEmail] = useState<string>('');\n  const [errorMessage, setErrorMessage] = useState<string>('Email is required');\n  const [isEmailError, setIsEmailError] = useState<boolean>(false);\n\n  const [commentText, setCommentText] = useState<string>('');\n  const [isCommentError, setIsCommentError] = useState<boolean>(false);\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    setErrorMessage('Email is required');\n    setIsLoading(true);\n\n    setIsNameError(!name);\n    setIsEmailError(!email);\n    setIsCommentError(!commentText);\n\n    if (!name || !email || !commentText) {\n      setIsLoading(false);\n\n      return;\n    }\n\n    if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/i.test(email)) {\n      setIsEmailError(true);\n      setErrorMessage('Email is invalid');\n      setIsLoading(false);\n\n      return;\n    }\n\n    const comment: Omit<Comment, 'id'> = {\n      postId,\n      name,\n      email,\n      body: commentText,\n    };\n\n    addComment(comment)\n      .then(newComment => {\n        setComments(currComments => [...currComments, newComment]);\n      })\n      .catch(() => setIsErrorComments(true))\n      .finally(() => {\n        setCommentText('');\n        setIsLoading(false);\n      });\n  };\n\n  const handleResetForm = () => {\n    setName('');\n    setEmail('');\n    setCommentText('');\n    setIsNameError(false);\n    setIsEmailError(false);\n    setIsCommentError(false);\n  };\n\n  const handleNameInput = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setName(event.target.value);\n    setIsNameError(false);\n  };\n\n  const handleEmailInput = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setEmail(event.target.value);\n    setIsEmailError(false);\n  };\n\n  const handleCommentInput = (\n    event: React.ChangeEvent<HTMLTextAreaElement>,\n  ) => {\n    setCommentText(event.target.value);\n    setIsCommentError(false);\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames(\n              'input',\n              { 'is-danger': isNameError },\n            )}\n            value={name}\n            onChange={handleNameInput}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {isNameError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {isNameError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames(\n              'input',\n              { 'is-danger': isEmailError },\n            )}\n            value={email}\n            onChange={handleEmailInput}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {isEmailError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {isEmailError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            {errorMessage}\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames(\n              'textarea',\n              { 'is-danger': isCommentError },\n            )}\n            value={commentText}\n            onChange={handleCommentInput}\n          />\n        </div>\n\n        {isCommentError && (\n          <p\n            className=\"help is-danger\"\n            data-cy=\"ErrorMessage\"\n          >\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames(\n              'button is-link',\n              { 'is-loading': isLoading },\n            )}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={handleResetForm}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { Comment } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n\nexport const getPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n\nexport const getComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const deleteComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n\nexport const addComment = (comment: Omit<Comment, 'id'>) => {\n  return client.post<Comment>('/comments', comment);\n};\n","import { deleteComment } from '../../api/posts';\nimport { Comment } from '../../types/Comment';\nimport { Post } from '../../types/Post';\nimport { Loader } from '../Loader';\nimport { NewCommentForm } from '../NewCommentForm/NewCommentForm';\n\ntype Props = {\n  comments: Comment[],\n  selectedPost: Post | null,\n  isErrorComments: boolean,\n  isLoadingComments: boolean,\n  isFormShown: boolean,\n  setComments: React.Dispatch<React.SetStateAction<Comment[]>>,\n  setIsErrorComments: (v: boolean) => void,\n  setIsFormShown: (v: boolean) => void,\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  comments,\n  selectedPost,\n  isErrorComments,\n  isLoadingComments,\n  isFormShown,\n  setComments,\n  setIsErrorComments,\n  setIsFormShown,\n}) => {\n  const handleDeleteComment = (commentId: number) => {\n    setComments(currentComments => currentComments.filter(\n      comment => comment.id !== commentId,\n    ));\n\n    deleteComment(commentId)\n      .catch(() => {\n        setIsErrorComments(true);\n      });\n  };\n\n  return (\n    <div\n      className=\"content\"\n      data-cy=\"PostDetails\"\n    >\n      <div\n        className=\"content\"\n        data-cy=\"PostDetails\"\n      >\n        {selectedPost && (\n          <div className=\"block\">\n            <h2 data-cy=\"PostTitle\">\n\n              {`#${selectedPost.id}: ${selectedPost.title}`}\n            </h2>\n\n            <p data-cy=\"PostBody\">\n              {selectedPost.body}\n            </p>\n          </div>\n        )}\n\n        <div className=\"block\">\n          {isLoadingComments && <Loader />}\n\n          {!isLoadingComments && isErrorComments && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n\n          {!isErrorComments && !isLoadingComments && comments.length < 1 && (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          )}\n\n          {!isErrorComments && !isLoadingComments && comments.length > 0 && (\n            <>\n              <p className=\"title is-4\">Comments:</p>\n\n              {comments.map(comment => {\n                const {\n                  id,\n                  name,\n                  email,\n                  body,\n                } = comment;\n\n                return (\n                  <article\n                    className=\"message is-small\"\n                    data-cy=\"Comment\"\n                    key={id}\n                  >\n                    <div className=\"message-header\">\n                      <a\n                        href={`mailto:${email}`}\n                        data-cy=\"CommentAuthor\"\n                      >\n                        {name}\n                      </a>\n                      <button\n                        data-cy=\"CommentDelete\"\n                        type=\"button\"\n                        className=\"delete is-small\"\n                        aria-label=\"delete\"\n                        onClick={() => handleDeleteComment(id)}\n                      >\n                        delete button\n                      </button>\n                    </div>\n\n                    <div className=\"message-body\" data-cy=\"CommentBody\">\n                      {body}\n                    </div>\n                  </article>\n                );\n              })}\n            </>\n          )}\n          {!isErrorComments && !isLoadingComments && !isFormShown && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={() => setIsFormShown(!isFormShown)}\n            >\n              Write a comment\n            </button>\n          )}\n\n        </div>\n        {!isErrorComments && selectedPost && isFormShown && (\n          <NewCommentForm\n            setIsErrorComments={setIsErrorComments}\n            setComments={setComments}\n            postId={selectedPost.id}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import classNames from 'classnames';\nimport { useEffect, useRef, useState } from 'react';\nimport { User } from '../../types/User';\nimport { Post } from '../../types/Post';\nimport { Comment } from '../../types/Comment';\n\ntype Props = {\n  users: User[],\n  selectedUser: User | null,\n  setSelectedUser: (user: User) => void,\n  setSelectedPost: (post: Post | null) => void,\n  setComments: (comments: Comment[]) => void,\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  users,\n  selectedUser,\n  setSelectedUser,\n  setSelectedPost,\n  setComments,\n}) => {\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n  const dropdownRef = useRef<HTMLButtonElement | null>(null);\n\n  useEffect(() => {\n    function handleClickOutside(event: MouseEvent) {\n      if (dropdownRef.current && !dropdownRef.current\n        .contains(event.target as Node)) {\n        setIsOpen(false);\n      }\n    }\n\n    if (isOpen) {\n      document.addEventListener('click', handleClickOutside);\n    }\n\n    return () => {\n      document.removeEventListener('click', handleClickOutside);\n    };\n  }, [isOpen]);\n\n  const handleSelectUser = (user: User) => {\n    if (user.id !== selectedUser?.id) {\n      setIsOpen(false);\n      setSelectedPost(null);\n      setComments([]);\n      setSelectedUser(user);\n    }\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames(\n        'dropdown',\n        { 'is-active': isOpen },\n      )}\n    >\n      <div\n        className=\"dropdown-trigger\"\n      >\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setIsOpen(!isOpen)}\n          ref={dropdownRef}\n        >\n          {selectedUser\n            ? <span>{selectedUser.name}</span>\n            : <span>Choose a user</span>}\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div\n        className=\"dropdown-menu\"\n        id=\"dropdown-menu\"\n        role=\"menu\"\n      >\n        <div\n          className=\"dropdown-content\"\n        >\n          {users.map(user => {\n            const { id, name } = user;\n\n            return (\n              <a\n                key={id}\n                href={`#user-${id}`}\n                className={classNames(\n                  'dropdown-item',\n                  { 'is-active': id === selectedUser?.id },\n                )}\n                onClick={() => handleSelectUser(user)}\n              >\n                {name}\n              </a>\n            );\n          })}\n        </div>\n      </div>\n\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList/PostsList';\nimport { PostDetails } from './components/PostDetails/PostDetails';\nimport { UserSelector } from './components/UserSelector/UserSelector';\nimport { Loader } from './components/Loader';\nimport { getComments, getPosts, getUsers } from './api/posts';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\nimport { Comment } from './types/Comment';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [isLoadingUsers, setIsLoadingUsers] = useState<boolean>(false);\n  const [isErrorPosts, setIsErrorPosts] = useState<boolean>(false);\n\n  const [posts, setPosts] = useState<Post[] | null>(null);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isErrorComments, setIsErrorComments] = useState<boolean>(false);\n  const [isLoadingComments, setIsLoadingComments] = useState<boolean>(false);\n  const [isFormShown, setIsFormShown] = useState<boolean>(false);\n\n  useEffect(() => {\n    getUsers()\n      .then(setUsers)\n      .catch(() => setIsErrorPosts(true));\n  }, []);\n\n  useEffect(() => {\n    if (selectedUser) {\n      setIsLoadingUsers(true);\n\n      getPosts(selectedUser.id)\n        .then((resolve) => {\n          setPosts(resolve);\n        })\n        .catch(() => {\n          setIsErrorPosts(true);\n        })\n        .finally(() => {\n          setIsLoadingUsers(false);\n        });\n    }\n  }, [selectedUser]);\n\n  useEffect(() => {\n    setIsErrorComments(false);\n    setIsLoadingComments(true);\n    if (selectedPost) {\n      getComments(selectedPost.id)\n        .then((resolve) => {\n          setComments(resolve);\n        })\n        .catch((error: PromiseRejectedResult) => {\n          setIsErrorComments(true);\n          throw new Error(error.status);\n        })\n        .finally(() => {\n          setIsLoadingComments(false);\n        });\n    }\n  }, [selectedPost]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  selectedUser={selectedUser}\n                  setSelectedUser={setSelectedUser}\n                  setSelectedPost={setSelectedPost}\n                  setComments={setComments}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser && !isErrorPosts && !isLoadingUsers && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isLoadingUsers && <Loader />}\n\n                {!isLoadingUsers && isErrorPosts && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {!isLoadingUsers && posts && posts.length < 1 && (\n                  <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n                    No posts yet\n                  </div>\n                )}\n\n                {!isLoadingUsers && posts && posts.length > 0 && (\n                  <PostsList\n                    posts={posts}\n                    selectedPost={selectedPost}\n                    setIsFormShown={setIsFormShown}\n                    setSelectedPost={setSelectedPost}\n                    setIsErrorComments={setIsErrorComments}\n                    setComments={setComments}\n                  />\n                )}\n\n              </div>\n            </div>\n          </div>\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': selectedPost },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              {selectedPost && (\n                <PostDetails\n                  selectedPost={selectedPost}\n                  comments={comments}\n                  isErrorComments={isErrorComments}\n                  isLoadingComments={isLoadingComments}\n                  setComments={setComments}\n                  setIsErrorComments={setIsErrorComments}\n                  setIsFormShown={setIsFormShown}\n                  isFormShown={isFormShown}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}