{"version":3,"sources":["components/PostsList/PostsList.tsx","utils/fetchClient.ts","components/Loader/Loader.tsx","components/NewCommentForm/NewCommentForm.tsx","api/posts.tsx","components/PostDetails/PostDetails.tsx","components/UserSelector/UserSelector.tsx","App.tsx","index.tsx"],"names":["PostsList","_ref","posts","selectedPost","setSelectedPost","setIsLoadingComments","setIsErrorComments","setIsFormShown","_jsxs","children","_jsx","className","map","post","id","title","type","classNames","onClick","handleSelectPost","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","arguments","length","undefined","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","Loader","NewCommentForm","setComments","postId","_useState","useState","_useState2","_slicedToArray","isLoading","setIsLoading","_useState3","_useState4","name","setName","_useState5","_useState6","isNameError","setIsNameError","_useState7","_useState8","email","setEmail","_useState9","_useState10","errorMessage","setErrorMessage","_useState11","_useState12","isEmailError","setIsEmailError","_useState13","_useState14","commentText","setCommentText","_useState15","_useState16","isCommentError","setIsCommentError","onSubmit","event","preventDefault","test","comment","addComment","newComment","prevState","concat","_toConsumableArray","catch","finally","htmlFor","placeholder","value","onChange","target","PostDetails","comments","isErrorComments","isLoadingComments","isFormShown","handleDeleteComment","commentId","currentComments","filter","deleteComment","_Fragment","href","UserSelector","users","selectedUser","setSelectedUser","isOpen","setIsOpen","dropdownRef","useRef","useEffect","handleClickOutside","current","contains","document","addEventListener","removeEventListener","ref","role","user","handleSelectUser","App","setUsers","isLoadingUsers","setIsLoadingUsers","isErrorPosts","setIsErrorPosts","setPosts","_useState17","_useState18","_useState19","_useState20","userId","error","Error","status","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.960c106d.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport React from 'react';\nimport { Post } from '../../types/Post';\n\ntype Props = {\n  posts: Post[],\n  selectedPost: Post | null,\n  setSelectedPost: (post: Post | null) => void,\n  setIsLoadingComments: (v: boolean) => void,\n  setIsErrorComments: (v: boolean) => void,\n  setIsFormShown: (v: boolean) => void,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  selectedPost,\n  setSelectedPost,\n  setIsLoadingComments,\n  setIsErrorComments,\n  setIsFormShown,\n}) => {\n  const handleSelectPost = (post: Post) => {\n    if (selectedPost?.id !== post.id) {\n      setIsLoadingComments(true);\n      setSelectedPost(post);\n      setIsFormShown(false);\n\n      return;\n    }\n\n    setIsErrorComments(false);\n    setSelectedPost(null);\n  };\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(post => {\n            const { id, title } = post;\n\n            return (\n              <tr data-cy=\"Post\" key={id}>\n                <td data-cy=\"PostId\">\n                  {id}\n                </td>\n\n                <td data-cy=\"PostTitle\">\n                  {title}\n                </td>\n\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    type=\"button\"\n                    data-cy=\"PostButton\"\n                    className={classNames(\n                      'button is-link',\n                      { 'is-light': selectedPost?.id !== id },\n                    )}\n                    onClick={() => handleSelectPost(post)}\n                  >\n                    {selectedPost?.id === id ? 'Close' : 'Open'}\n                  </button>\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { Comment } from '../../types/Comment';\nimport { addComment } from '../../api/posts';\n\ntype Props = {\n  setIsErrorComments: (v: boolean) => void,\n  setComments: React.Dispatch<React.SetStateAction<Comment[]>>\n  postId: number,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  setIsErrorComments,\n  setComments,\n  postId,\n}) => {\n  const [isLoading, setIsLoading] = useState(false);\n\n  const [name, setName] = useState('');\n  const [isNameError, setIsNameError] = useState(false);\n\n  const [email, setEmail] = useState('');\n  const [errorMessage, setErrorMessage] = useState('Email is required');\n  const [isEmailError, setIsEmailError] = useState(false);\n\n  const [commentText, setCommentText] = useState('');\n  const [isCommentError, setIsCommentError] = useState(false);\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    setErrorMessage('Email is required');\n    setIsLoading(true);\n\n    setIsNameError(!name);\n    setIsEmailError(!email);\n    setIsCommentError(!commentText);\n\n    if (!name || !email || !commentText) {\n      setIsLoading(false);\n\n      return;\n    }\n\n    if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(email)) {\n      setIsEmailError(true);\n      setErrorMessage('Email is invalid');\n      setIsLoading(false);\n\n      return;\n    }\n\n    const comment: Omit<Comment, 'id'> = {\n      postId,\n      name,\n      email,\n      body: commentText,\n    };\n\n    addComment(comment)\n      .then(newComment => {\n        setComments((prevState) => [...prevState, newComment]);\n      })\n      .catch(() => setIsErrorComments(true))\n      .finally(() => {\n        setCommentText('');\n        setIsLoading(false);\n      });\n  };\n\n  const handleResetForm = () => {\n    setName('');\n    setEmail('');\n    setCommentText('');\n    setIsNameError(false);\n    setIsEmailError(false);\n    setIsCommentError(false);\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames(\n              'input',\n              { 'is-danger': isNameError },\n            )}\n            value={name}\n            onChange={(event) => {\n              setName(event.target.value);\n              setIsNameError(false);\n            }}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {isNameError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {isNameError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames(\n              'input',\n              { 'is-danger': isEmailError },\n            )}\n            value={email}\n            onChange={(event) => {\n              setEmail(event.target.value);\n              setIsEmailError(false);\n            }}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {isEmailError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {isEmailError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            {errorMessage}\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames(\n              'textarea',\n              { 'is-danger': isCommentError },\n            )}\n            value={commentText}\n            onChange={(event) => {\n              setCommentText(event.target.value);\n              setIsCommentError(false);\n            }}\n          />\n        </div>\n\n        {isCommentError && (\n          <p\n            className=\"help is-danger\"\n            data-cy=\"ErrorMessage\"\n          >\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames(\n              'button is-link',\n              { 'is-loading': isLoading },\n            )}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={handleResetForm}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { Comment } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n\nexport const getPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n\nexport const getComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const deleteComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n\nexport const addComment = (comment: Omit<Comment, 'id'>) => {\n  return client.post<Comment>('/comments', comment);\n};\n","import { deleteComment } from '../../api/posts';\nimport { Comment } from '../../types/Comment';\nimport { Post } from '../../types/Post';\nimport { Loader } from '../Loader';\nimport { NewCommentForm } from '../NewCommentForm/NewCommentForm';\n\ntype Props = {\n  comments: Comment[],\n  selectedPost: Post | null,\n  isErrorComments: boolean,\n  isLoadingComments: boolean,\n  setComments: React.Dispatch<React.SetStateAction<Comment[]>>,\n  setIsErrorComments: (v: boolean) => void,\n  setIsFormShown: (v: boolean) => void,\n  isFormShown: boolean,\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  comments,\n  selectedPost,\n  isErrorComments,\n  isLoadingComments,\n  setComments,\n  setIsErrorComments,\n  setIsFormShown,\n  isFormShown,\n}) => {\n  const handleDeleteComment = (commentId: number) => {\n    setComments(currentComments => currentComments\n      .filter(comment => comment.id !== commentId));\n\n    deleteComment(commentId)\n      .then()\n      .catch(() => {\n        setIsErrorComments(true);\n      });\n  };\n\n  return (\n    <div\n      className=\"content\"\n      data-cy=\"PostDetails\"\n    >\n      <div\n        className=\"content\"\n        data-cy=\"PostDetails\"\n      >\n        {selectedPost && (\n          <div className=\"block\">\n            <h2 data-cy=\"PostTitle\">\n\n              {`#${selectedPost.id}: ${selectedPost.title}`}\n            </h2>\n\n            <p data-cy=\"PostBody\">\n              {selectedPost.body}\n            </p>\n          </div>\n        )}\n\n        <div className=\"block\">\n          {isLoadingComments && <Loader />}\n\n          {!isLoadingComments && isErrorComments && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n\n          {!isErrorComments && !isLoadingComments && comments.length < 1 && (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          )}\n\n          {!isErrorComments && !isLoadingComments && comments.length > 0 && (\n            <>\n              <p className=\"title is-4\">Comments:</p>\n\n              {comments.map(comment => {\n                const {\n                  id,\n                  name,\n                  email,\n                  body,\n                } = comment;\n\n                return (\n                  <article\n                    className=\"message is-small\"\n                    data-cy=\"Comment\"\n                    key={id}\n                  >\n                    <div className=\"message-header\">\n                      <a\n                        href={`mailto:${email}`}\n                        data-cy=\"CommentAuthor\"\n                      >\n                        {name}\n                      </a>\n                      <button\n                        data-cy=\"CommentDelete\"\n                        type=\"button\"\n                        className=\"delete is-small\"\n                        aria-label=\"delete\"\n                        onClick={() => handleDeleteComment(id)}\n                      >\n                        delete button\n                      </button>\n                    </div>\n\n                    <div className=\"message-body\" data-cy=\"CommentBody\">\n                      {body}\n                    </div>\n                  </article>\n                );\n              })}\n            </>\n          )}\n          {!isFormShown && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={() => setIsFormShown(!isFormShown)}\n            >\n              Write a comment\n            </button>\n          )}\n\n        </div>\n        {!isErrorComments && selectedPost && isFormShown && (\n          <NewCommentForm\n            setIsErrorComments={setIsErrorComments}\n            setComments={setComments}\n            postId={selectedPost.id}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import classNames from 'classnames';\nimport { useEffect, useRef, useState } from 'react';\nimport { User } from '../../types/User';\n\ntype Props = {\n  users: User[],\n  selectedUser: User | null,\n  setSelectedUser: (user: User) => void,\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  users,\n  selectedUser,\n  setSelectedUser,\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const dropdownRef = useRef<HTMLButtonElement | null>(null);\n\n  useEffect(() => {\n    function handleClickOutside(event: MouseEvent) {\n      if (dropdownRef.current && !dropdownRef.current\n        .contains(event.target as Node)) {\n        setIsOpen(false);\n      }\n    }\n\n    if (isOpen) {\n      document.addEventListener('click', handleClickOutside);\n    }\n\n    return () => {\n      document.removeEventListener('click', handleClickOutside);\n    };\n  }, [isOpen]);\n\n  const handleSelectUser = (user: User) => {\n    if (user.id !== selectedUser?.id) {\n      setSelectedUser(user);\n      setIsOpen(false);\n    }\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames(\n        'dropdown',\n        { 'is-active': isOpen },\n      )}\n    >\n      <div\n        className=\"dropdown-trigger\"\n      >\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setIsOpen(!isOpen)}\n          ref={dropdownRef}\n        >\n          {selectedUser\n            ? <span>{selectedUser.name}</span>\n            : <span>Choose a user</span>}\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div\n        className=\"dropdown-menu\"\n        id=\"dropdown-menu\"\n        role=\"menu\"\n      >\n        <div\n          className=\"dropdown-content\"\n        >\n          {users.map(user => {\n            const { id, name } = user;\n\n            return (\n              <a\n                key={id}\n                href={`#user-${id}`}\n                className={classNames(\n                  'dropdown-item',\n                  { 'si-active': id === selectedUser?.id },\n                )}\n                onClick={() => handleSelectUser(user)}\n              >\n                {name}\n              </a>\n            );\n          })}\n        </div>\n      </div>\n\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList/PostsList';\nimport { PostDetails } from './components/PostDetails/PostDetails';\nimport { UserSelector } from './components/UserSelector/UserSelector';\nimport { Loader } from './components/Loader';\nimport { getComments, getPosts, getUsers } from './api/posts';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\nimport { Comment } from './types/Comment';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [isLoadingUsers, setIsLoadingUsers] = useState(false);\n  const [isErrorPosts, setIsErrorPosts] = useState(false);\n\n  const [posts, setPosts] = useState<Post[] | null>(null);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isErrorComments, setIsErrorComments] = useState(false);\n  const [isLoadingComments, setIsLoadingComments] = useState(false);\n  const [isFormShown, setIsFormShown] = useState(false);\n\n  useEffect(() => {\n    getUsers()\n      .then(setUsers)\n      .catch(() => setIsErrorPosts(true));\n  }, []);\n\n  useEffect(() => {\n    if (selectedUser) {\n      setIsLoadingUsers(true);\n\n      getPosts(selectedUser.id)\n        .then((resolve) => {\n          setPosts(resolve);\n        })\n        .catch(() => {\n          setIsErrorPosts(true);\n        })\n        .finally(() => {\n          setIsLoadingUsers(false);\n        });\n    }\n  }, [selectedUser]);\n\n  useEffect(() => {\n    if (selectedPost) {\n      getComments(selectedPost.id)\n        .then((resolve) => {\n          setComments(resolve);\n        })\n        .catch((error: PromiseRejectedResult) => {\n          setIsErrorComments(true);\n          throw new Error(error.status);\n        })\n        .finally(() => {\n          setIsLoadingComments(false);\n        });\n    }\n  }, [selectedPost]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  selectedUser={selectedUser}\n                  setSelectedUser={setSelectedUser}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser && !isErrorPosts && !isLoadingUsers && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isLoadingUsers && <Loader />}\n\n                {isErrorPosts && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {posts && posts.length < 1 && (\n                  <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n                    No posts yet\n                  </div>\n                )}\n\n                {posts && posts.length > 0 && (\n                  <PostsList\n                    posts={posts}\n                    setIsFormShown={setIsFormShown}\n                    selectedPost={selectedPost}\n                    setSelectedPost={setSelectedPost}\n                    setIsLoadingComments={setIsLoadingComments}\n                    setIsErrorComments={setIsErrorComments}\n                  />\n                )}\n\n              </div>\n            </div>\n          </div>\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': selectedPost },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              <PostDetails\n                selectedPost={selectedPost}\n                comments={comments}\n                isErrorComments={isErrorComments}\n                isLoadingComments={isLoadingComments}\n                setComments={setComments}\n                setIsErrorComments={setIsErrorComments}\n                setIsFormShown={setIsFormShown}\n                isFormShown={isFormShown}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}